# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may
# not use this file except in compliance with the License. A copy of the
# License is located at
#
# 	http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
env:
  PATH: "/usr/lib/go-1.13/bin:/usr/bin"

steps:
  - label: ':ec2: environment'
    command:
      - uname -a
      - go version
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"

  - label: ':go: go mod download'
    command: 'go mod download'
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"

  - label: ':linux: setup taps'
    commands:
      - 'sudo ip tuntap add fc-test-tap${BUILDKITE_BUILD_NUMBER} mode tap user $(sudo id -u buildkite-agent)'
      - 'sudo ip tuntap add fc-root-tap${BUILDKITE_BUILD_NUMBER} mode tap user $(sudo id -u buildkite-agent)'
      - 'sudo ip tuntap add fc-mst-tap${BUILDKITE_BUILD_NUMBER} mode tap user $(sudo id -u buildkite-agent)'
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"

  - label: ':linux: build docker images'
    commands:
      - 'make test-images'
      - 'buildkite-agent artifact upload testdata/firecracker-master'
      - 'buildkite-agent artifact upload testdata/jailer-master'
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"

  # We use a "wait" step here, because Go's module logic freaks out when
  # multiple go builds are downloading to the same cache.
  - wait

  - label: gofmt -s
    command: test -z $(gofmt -s -l .)
    # This should run in the same queue, but we don't care whether it runs on
    # the same host.
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"

  - label: 'git log validation'
    command: './.buildkite/logcheck.sh'
    # This should run in the same queue, but we don't care whether it runs on
    # the same host.
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"

  - label: 'build'
    commands:
      - 'make'
      - 'make -C cni'
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"


  - label: ':hammer: tests'
    commands:
      - 'ln -s /var/lib/fc-ci/vmlinux.bin testdata/vmlinux'
      - 'ln -s /var/lib/fc-ci/rootfs.ext4 testdata/root-drive.img'
      - "FC_TEST_TAP=fc-test-tap${BUILDKITE_BUILD_NUMBER} make test EXTRAGOARGS='-v -count=1 -race' DISABLE_ROOT_TESTS=true"
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"
    soft_fail:
      - exit_status: "*"

  - label: ':hammer: root tests'
    commands:
      - 'ln -s /var/lib/fc-ci/vmlinux.bin testdata/vmlinux'
      - 'ln -s /var/lib/fc-ci/rootfs.ext4 testdata/root-drive.img'
      - 'mkdir -p $(pwd)/testdata/bin'
      - 'make -C cni install CNI_BIN_ROOT=$(pwd)/testdata/bin'
      - "sudo PATH=$PATH FC_TEST_TAP=fc-root-tap${BUILDKITE_BUILD_NUMBER} make test EXTRAGOARGS='-v -count=1 -race' DISABLE_ROOT_TESTS="
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"
    soft_fail:
      - exit_status: "*"

  - label: ':hammer: test against firecracker master'
    env:
      FC_TEST_BIN: "testdata/firecracker-master"
      DOCKER_IMAGE_TAG: "$BUILDKITE_BUILD_NUMBER"
      FC_TEST_JAILER_BIN: "testdata/jailer-master"
    commands:
      - 'ln -s /var/lib/fc-ci/vmlinux.bin testdata/vmlinux'
      - 'ln -s /var/lib/fc-ci/rootfs.ext4 testdata/root-drive.img'
      - 'mkdir -p $(pwd)/testdata/bin'
      - 'make -C cni install CNI_BIN_ROOT=$(pwd)/testdata/bin'
      - 'buildkite-agent artifact download testdata/firecracker-master .'
      - 'chmod +x testdata/firecracker-master'
      - 'buildkite-agent artifact download testdata/jailer-master .'
      - 'chmod +x testdata/jailer-master'
      - "sudo -E PATH=$PATH FC_TEST_TAP=fc-mst-tap${BUILDKITE_BUILD_NUMBER} make test EXTRAGOARGS='-v -count=1 -race' DISABLE_ROOT_TESTS="
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"

  - label: 'go mod tidy'
    commands:
      - 'go mod tidy'
      - test -z "$(git status --porcelain)" && exit 0 || git --no-pager diff && echo -e '\ngo.mod and/or go.sum differ from committed, please run "go mod tidy" and commit the updated files.\n' && exit 42
    soft_fail:
      - exit_status: 42 # Dependabot doesn't modify go.mod and go.sum

  # This allows the cleanup step to always run, regardless of test failure
  - wait: ~
    continue_on_failure: true

  - label: ':linux: cleanup taps'
    commands:
      - 'sudo ip tuntap del fc-test-tap${BUILDKITE_BUILD_NUMBER} mode tap'
      - 'sudo ip tuntap del fc-root-tap${BUILDKITE_BUILD_NUMBER} mode tap'
      - 'sudo ip tuntap del fc-mst-tap${BUILDKITE_BUILD_NUMBER} mode tap'
    agents:
      queue: "${BUILDKITE_AGENT_META_DATA_QUEUE:-default}"
      distro: "${BUILDKITE_AGENT_META_DATA_DISTRO}"
      hostname: "${BUILDKITE_AGENT_META_DATA_HOSTNAME}"
